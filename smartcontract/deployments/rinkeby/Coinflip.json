{
  "address": "0x2F94bBAA057DF38a01d30dff6009ce8D53B1ff27",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bet",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Coinflip.Bet",
          "name": "bet",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "didWin",
          "type": "bool"
        }
      ],
      "name": "coinflipEnd",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "randomnessRequested",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COORDINATOR",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestCoinflip",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIdToBet",
      "outputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bet",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_requestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3b52aee71f986d510810867c8a1ad24e8e59cffcb25298226bd9a5884f553536",
  "receipt": {
    "to": null,
    "from": "0xA853Ad7156aaC80A5Ff6F8dcC32146d18f01E441",
    "contractAddress": "0x2F94bBAA057DF38a01d30dff6009ce8D53B1ff27",
    "transactionIndex": 4,
    "gasUsed": "749788",
    "logsBloom": "0x
    "blockHash": "0x3b9fb43b4c32b56ee2bc3621135ba4a25132ef6c268069f6c8280ce7c1001fce",
    "transactionHash": "0x3b52aee71f986d510810867c8a1ad24e8e59cffcb25298226bd9a5884f553536",
    "logs": [],
    "blockNumber": 10894062,
    "cumulativeGasUsed": "7201631",
    "status": 1,
    "byzantium": true
  },
  "args": [
    5555,
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc"
  ],
  "numDeployments": 2,
  "solcInputHash": "0e4e9dbc5df0fc2eccc37d7c43d316fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Coinflip.Bet\",\"name\":\"bet\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"didWin\",\"type\":\"bool\"}],\"name\":\"coinflipEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"randomnessRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COORDINATOR\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestCoinflip\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIdToBet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_requestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Coinflip.sol\":\"Coinflip\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Coinflip.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// An example of a consumer contract that relies on a subscription for funding.\\npragma solidity ^0.8.4;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\ncontract Coinflip is VRFConsumerBaseV2 {\\n    VRFCoordinatorV2Interface public COORDINATOR;\\n\\n    struct Bet {\\n        address player;\\n        uint256 bet;\\n    }\\n\\n    uint64 private immutable s_subscriptionId;\\n    bytes32 private immutable keyHash;\\n    uint32 private constant callbackGasLimit = 100000;\\n    uint16 private constant requestConfirmations = 3;\\n    uint32 private constant numWords = 2;\\n\\n    uint256 public s_requestId;\\n\\n    mapping(uint256 => Bet) public requestIdToBet;\\n\\n    event randomnessRequested(uint256 requestId);\\n    event coinflipEnd(uint256 requestId, Bet bet, bool didWin);\\n\\n    constructor(\\n        uint64 subscriptionId,\\n        address vrfCoordinator,\\n        bytes32 _keyHash\\n    ) VRFConsumerBaseV2(vrfCoordinator) {\\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\\n        s_subscriptionId = subscriptionId;\\n        keyHash = _keyHash;\\n    }\\n\\n    function requestCoinflip() external payable {\\n        require(msg.value > 0, \\\"No bet received\\\");\\n\\n        s_requestId = COORDINATOR.requestRandomWords(\\n            keyHash,\\n            s_subscriptionId,\\n            requestConfirmations,\\n            callbackGasLimit,\\n            numWords\\n        );\\n\\n        requestIdToBet[s_requestId] = Bet(msg.sender, msg.value);\\n\\n        emit randomnessRequested(s_requestId);\\n    }\\n\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\\n        internal\\n        override\\n    {\\n        bool hasWin = (randomWords[0] % 2 == 0);\\n        Bet storage winnerBet = requestIdToBet[requestId];\\n\\n        if (hasWin) {\\n            payable(winnerBet.player).transfer(winnerBet.bet);\\n            emit coinflipEnd(requestId, winnerBet, hasWin);\\n        } else {\\n            emit coinflipEnd(requestId, winnerBet, hasWin);\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x9330af0236df450a5ce14f77063f9d686fe1c345fe50043e40da7ee3c5e301f3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162000e6d38038062000e6d833981810160405281019062000037919062000125565b818073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508267ffffffffffffffff1660a08167ffffffffffffffff1660c01b815250508060c081815250505050506200021b565b600081519050620000f181620001cd565b92915050565b6000815190506200010881620001e7565b92915050565b6000815190506200011f8162000201565b92915050565b6000806000606084860312156200013b57600080fd5b60006200014b868287016200010e565b93505060206200015e86828701620000e0565b92505060406200017186828701620000f7565b9150509250925092565b6000620001888262000199565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600067ffffffffffffffff82169050919050565b620001d8816200017b565b8114620001e457600080fd5b50565b620001f2816200018f565b8114620001fe57600080fd5b50565b6200020c81620001b9565b81146200021857600080fd5b50565b60805160601c60a05160c01c60c051610c15620002586000396000610286015260006102a701526000818161012301526101770152610c156000f3fe60806040526004361061004e5760003560e01c80631fe543e31461005a5780633b2bcbf11461008357806373dbddf4146100ae578063b91a07e7146100b8578063e89e106a146100f657610055565b3661005557005b600080fd5b34801561006657600080fd5b50610081600480360381019061007c91906106d3565b610121565b005b34801561008f57600080fd5b506100986101e1565b6040516100a591906108cc565b60405180910390f35b6100b6610205565b005b3480156100c457600080fd5b506100df60048036038101906100da9190610681565b610415565b6040516100ed929190610850565b60405180910390f35b34801561010257600080fd5b5061010b610459565b6040516101189190610907565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101d357337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016101ca929190610827565b60405180910390fd5b6101dd828261045f565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003411610248576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023f906108e7565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006003620186a060026040518663ffffffff1660e01b81526004016102ee959493929190610879565b602060405180830381600087803b15801561030857600080fd5b505af115801561031c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034091906106aa565b60018190555060405180604001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020013481525060026000600154815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050507fe55579212dc469326f99f273fc36a9f0c0b0fa2538e629652176d0345e5abcae60015460405161040b9190610907565b60405180910390a1565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b60015481565b60008060028360008151811061049e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516104b09190610af2565b1490506000600260008581526020019081526020016000209050811561057f578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc82600101549081150290604051600060405180830381858888f1935050505015801561053e573d6000803e3d6000fd5b507f0ba3497c703917c81d6bde6524580d7f811c5fe6b9bc36d94d3fb78904877b9684828460405161057293929190610922565b60405180910390a16105bb565b7f0ba3497c703917c81d6bde6524580d7f811c5fe6b9bc36d94d3fb78904877b968482846040516105b293929190610922565b60405180910390a15b50505050565b60006105d46105cf8461097e565b610959565b905080838252602082019050828560208602820111156105f357600080fd5b60005b8581101561062357816106098882610657565b8452602084019350602083019250506001810190506105f6565b5050509392505050565b600082601f83011261063e57600080fd5b813561064e8482602086016105c1565b91505092915050565b60008135905061066681610bc8565b92915050565b60008151905061067b81610bc8565b92915050565b60006020828403121561069357600080fd5b60006106a184828501610657565b91505092915050565b6000602082840312156106bc57600080fd5b60006106ca8482850161066c565b91505092915050565b600080604083850312156106e657600080fd5b60006106f485828601610657565b925050602083013567ffffffffffffffff81111561071157600080fd5b61071d8582860161062d565b9150509250929050565b610730816109e5565b82525050565b61073f816109e5565b82525050565b61074e816109f7565b82525050565b61075d81610a03565b82525050565b61076c81610a69565b82525050565b600061077f600f836109aa565b915061078a82610b9f565b602082019050919050565b6040820160008083015490506107aa81610a8d565b6107b76000860182610727565b50600183015490506107c881610aa7565b6107d560208601826107eb565b5050505050565b6107e581610a0d565b82525050565b6107f481610a3b565b82525050565b61080381610a3b565b82525050565b61081281610a45565b82525050565b61082181610a55565b82525050565b600060408201905061083c6000830185610736565b6108496020830184610736565b9392505050565b60006040820190506108656000830185610736565b61087260208301846107fa565b9392505050565b600060a08201905061088e6000830188610754565b61089b6020830187610818565b6108a860408301866107dc565b6108b56060830185610809565b6108c26080830184610809565b9695505050505050565b60006020820190506108e16000830184610763565b92915050565b6000602082019050818103600083015261090081610772565b9050919050565b600060208201905061091c60008301846107fa565b92915050565b600060808201905061093760008301866107fa565b6109446020830185610795565b6109516060830184610745565b949350505050565b6000610963610974565b905061096f8282610ac1565b919050565b6000604051905090565b600067ffffffffffffffff82111561099957610998610b52565b5b602082029050602081019050919050565b600082825260208201905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006109f082610a1b565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000610a7482610a7b565b9050919050565b6000610a8682610a1b565b9050919050565b6000610aa0610a9b83610b92565b6109bb565b9050919050565b6000610aba610ab583610b92565b6109db565b9050919050565b610aca82610b81565b810181811067ffffffffffffffff82111715610ae957610ae8610b52565b5b80604052505050565b6000610afd82610a3b565b9150610b0883610a3b565b925082610b1857610b17610b23565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160001c9050919050565b7f4e6f206265742072656365697665640000000000000000000000000000000000600082015250565b610bd181610a3b565b8114610bdc57600080fd5b5056fea264697066735822122073d0809b1ed9bfb3b091bd098d1e988ae5c026b0c1e9d011bf59a6eabfc7162e64736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061004e5760003560e01c80631fe543e31461005a5780633b2bcbf11461008357806373dbddf4146100ae578063b91a07e7146100b8578063e89e106a146100f657610055565b3661005557005b600080fd5b34801561006657600080fd5b50610081600480360381019061007c91906106d3565b610121565b005b34801561008f57600080fd5b506100986101e1565b6040516100a591906108cc565b60405180910390f35b6100b6610205565b005b3480156100c457600080fd5b506100df60048036038101906100da9190610681565b610415565b6040516100ed929190610850565b60405180910390f35b34801561010257600080fd5b5061010b610459565b6040516101189190610907565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101d357337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016101ca929190610827565b60405180910390fd5b6101dd828261045f565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003411610248576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023f906108e7565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006003620186a060026040518663ffffffff1660e01b81526004016102ee959493929190610879565b602060405180830381600087803b15801561030857600080fd5b505af115801561031c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034091906106aa565b60018190555060405180604001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020013481525060026000600154815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050507fe55579212dc469326f99f273fc36a9f0c0b0fa2538e629652176d0345e5abcae60015460405161040b9190610907565b60405180910390a1565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b60015481565b60008060028360008151811061049e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516104b09190610af2565b1490506000600260008581526020019081526020016000209050811561057f578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc82600101549081150290604051600060405180830381858888f1935050505015801561053e573d6000803e3d6000fd5b507f0ba3497c703917c81d6bde6524580d7f811c5fe6b9bc36d94d3fb78904877b9684828460405161057293929190610922565b60405180910390a16105bb565b7f0ba3497c703917c81d6bde6524580d7f811c5fe6b9bc36d94d3fb78904877b968482846040516105b293929190610922565b60405180910390a15b50505050565b60006105d46105cf8461097e565b610959565b905080838252602082019050828560208602820111156105f357600080fd5b60005b8581101561062357816106098882610657565b8452602084019350602083019250506001810190506105f6565b5050509392505050565b600082601f83011261063e57600080fd5b813561064e8482602086016105c1565b91505092915050565b60008135905061066681610bc8565b92915050565b60008151905061067b81610bc8565b92915050565b60006020828403121561069357600080fd5b60006106a184828501610657565b91505092915050565b6000602082840312156106bc57600080fd5b60006106ca8482850161066c565b91505092915050565b600080604083850312156106e657600080fd5b60006106f485828601610657565b925050602083013567ffffffffffffffff81111561071157600080fd5b61071d8582860161062d565b9150509250929050565b610730816109e5565b82525050565b61073f816109e5565b82525050565b61074e816109f7565b82525050565b61075d81610a03565b82525050565b61076c81610a69565b82525050565b600061077f600f836109aa565b915061078a82610b9f565b602082019050919050565b6040820160008083015490506107aa81610a8d565b6107b76000860182610727565b50600183015490506107c881610aa7565b6107d560208601826107eb565b5050505050565b6107e581610a0d565b82525050565b6107f481610a3b565b82525050565b61080381610a3b565b82525050565b61081281610a45565b82525050565b61082181610a55565b82525050565b600060408201905061083c6000830185610736565b6108496020830184610736565b9392505050565b60006040820190506108656000830185610736565b61087260208301846107fa565b9392505050565b600060a08201905061088e6000830188610754565b61089b6020830187610818565b6108a860408301866107dc565b6108b56060830185610809565b6108c26080830184610809565b9695505050505050565b60006020820190506108e16000830184610763565b92915050565b6000602082019050818103600083015261090081610772565b9050919050565b600060208201905061091c60008301846107fa565b92915050565b600060808201905061093760008301866107fa565b6109446020830185610795565b6109516060830184610745565b949350505050565b6000610963610974565b905061096f8282610ac1565b919050565b6000604051905090565b600067ffffffffffffffff82111561099957610998610b52565b5b602082029050602081019050919050565b600082825260208201905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006109f082610a1b565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000610a7482610a7b565b9050919050565b6000610a8682610a1b565b9050919050565b6000610aa0610a9b83610b92565b6109bb565b9050919050565b6000610aba610ab583610b92565b6109db565b9050919050565b610aca82610b81565b810181811067ffffffffffffffff82111715610ae957610ae8610b52565b5b80604052505050565b6000610afd82610a3b565b9150610b0883610a3b565b925082610b1857610b17610b23565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160001c9050919050565b7f4e6f206265742072656365697665640000000000000000000000000000000000600082015250565b610bd181610a3b565b8114610bdc57600080fd5b5056fea264697066735822122073d0809b1ed9bfb3b091bd098d1e988ae5c026b0c1e9d011bf59a6eabfc7162e64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 155,
        "contract": "contracts/Coinflip.sol:Coinflip",
        "label": "COORDINATOR",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(VRFCoordinatorV2Interface)146"
      },
      {
        "astId": 175,
        "contract": "contracts/Coinflip.sol:Coinflip",
        "label": "s_requestId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 180,
        "contract": "contracts/Coinflip.sol:Coinflip",
        "label": "requestIdToBet",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Bet)160_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(VRFCoordinatorV2Interface)146": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Bet)160_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Coinflip.Bet)",
        "numberOfBytes": "32",
        "value": "t_struct(Bet)160_storage"
      },
      "t_struct(Bet)160_storage": {
        "encoding": "inplace",
        "label": "struct Coinflip.Bet",
        "members": [
          {
            "astId": 157,
            "contract": "contracts/Coinflip.sol:Coinflip",
            "label": "player",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 159,
            "contract": "contracts/Coinflip.sol:Coinflip",
            "label": "bet",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}