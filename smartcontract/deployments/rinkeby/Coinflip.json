{
  "address": "0x39265487cC4f5c1763A79394a5EB54188705CB24",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CoinflipInCourse",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientContractFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoBetSent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bet",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "didWin",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct Coinflip.Bet",
          "name": "bet",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "didWin",
          "type": "bool"
        }
      ],
      "name": "CoinflipEnd",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RandomnessRequested",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COORDINATOR",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllBets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bet",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "didWin",
              "type": "bool"
            }
          ],
          "internalType": "struct Coinflip.Bet[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestCoinflip",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIdToBet",
      "outputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bet",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "didWin",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_requestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x27bedc67a6f620d67eeab2614bc3b89430067d37c016954369321d480d5912d1",
  "receipt": {
    "to": null,
    "from": "0xA853Ad7156aaC80A5Ff6F8dcC32146d18f01E441",
    "contractAddress": "0x39265487cC4f5c1763A79394a5EB54188705CB24",
    "transactionIndex": 7,
    "gasUsed": "1117122",
    "logsBloom": "0x
    "blockHash": "0xc763a468858b79a0a868a5aaa71a020ed0c707147269331a505d4337f5397015",
    "transactionHash": "0x27bedc67a6f620d67eeab2614bc3b89430067d37c016954369321d480d5912d1",
    "logs": [],
    "blockNumber": 10900452,
    "cumulativeGasUsed": "2023825",
    "status": 1,
    "byzantium": true
  },
  "args": [
    5555,
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc"
  ],
  "numDeployments": 7,
  "solcInputHash": "786458ec41c9f8e25a19db2b2854babd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CoinflipInCourse\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientContractFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoBetSent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"didWin\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct Coinflip.Bet\",\"name\":\"bet\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"didWin\",\"type\":\"bool\"}],\"name\":\"CoinflipEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RandomnessRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COORDINATOR\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllBets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"didWin\",\"type\":\"bool\"}],\"internalType\":\"struct Coinflip.Bet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestCoinflip\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIdToBet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"didWin\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_requestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Coinflip.sol\":\"Coinflip\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Coinflip.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// An example of a consumer contract that relies on a subscription for funding.\\npragma solidity ^0.8.4;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\nerror NoBetSent();\\nerror CoinflipInCourse();\\nerror InsufficientContractFunds();\\n\\ncontract Coinflip is VRFConsumerBaseV2 {\\n    VRFCoordinatorV2Interface public COORDINATOR;\\n\\n    struct Bet {\\n        address player;\\n        uint256 bet;\\n        bool didWin;\\n    }\\n\\n    uint64 private immutable s_subscriptionId;\\n    uint256 public s_requestId;\\n    bytes32 private immutable keyHash;\\n    uint32 private constant callbackGasLimit = 100000;\\n    uint16 private constant requestConfirmations = 3;\\n    uint32 private constant numWords = 2;\\n\\n    uint256 private ethToSend;\\n    mapping(uint256 => Bet) public requestIdToBet;\\n    mapping(address => bool) private userToCoinflip;\\n\\n    event RandomnessRequested(uint256 requestId);\\n    event CoinflipEnd(uint256 requestId, Bet bet, bool didWin);\\n\\n    constructor(\\n        uint64 subscriptionId,\\n        address vrfCoordinator,\\n        bytes32 _keyHash\\n    ) VRFConsumerBaseV2(vrfCoordinator) {\\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\\n        s_subscriptionId = subscriptionId;\\n        keyHash = _keyHash;\\n    }\\n\\n    function requestCoinflip() external payable {\\n        if (msg.value == 0) {\\n            revert NoBetSent();\\n        }\\n\\n        if ((ethToSend + msg.value * 2) > address(this).balance) {\\n            revert InsufficientContractFunds();\\n        }\\n\\n        if (userToCoinflip[msg.sender]) {\\n            revert CoinflipInCourse();\\n        }\\n\\n        s_requestId = COORDINATOR.requestRandomWords(\\n            keyHash,\\n            s_subscriptionId,\\n            requestConfirmations,\\n            callbackGasLimit,\\n            numWords\\n        );\\n\\n        requestIdToBet[s_requestId] = Bet(msg.sender, msg.value, false);\\n        userToCoinflip[msg.sender] = true;\\n        ethToSend += msg.value * 2;\\n\\n        emit RandomnessRequested(s_requestId);\\n    }\\n\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\\n        internal\\n        override\\n    {\\n        bool hasWin = (randomWords[0] % 2 == 0);\\n        Bet storage playerBet = requestIdToBet[requestId];\\n\\n        if (hasWin) {\\n            payable(playerBet.player).transfer(playerBet.bet * 2);\\n            playerBet.didWin = true;\\n            emit CoinflipEnd(requestId, playerBet, hasWin);\\n        } else {\\n            emit CoinflipEnd(requestId, playerBet, hasWin);\\n        }\\n\\n        userToCoinflip[playerBet.player] = false;\\n        ethToSend -= playerBet.bet * 2;\\n    }\\n\\n    function getAllBets() public view returns (Bet[] memory) {\\n        Bet[] memory allBets = new Bet[](s_requestId);\\n        for (uint256 i = 0; i < s_requestId; i++) {\\n            allBets[i] = requestIdToBet[i + 1];\\n        }\\n        return allBets;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x520757dafc282ba582f7151892c0f0554801beafb0a972fe140fa0fe90aa96a2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200151a3803806200151a833981810160405281019062000037919062000125565b818073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508267ffffffffffffffff1660a08167ffffffffffffffff1660c01b815250508060c081815250505050506200021b565b600081519050620000f181620001cd565b92915050565b6000815190506200010881620001e7565b92915050565b6000815190506200011f8162000201565b92915050565b6000806000606084860312156200013b57600080fd5b60006200014b868287016200010e565b93505060206200015e86828701620000e0565b92505060406200017186828701620000f7565b9150509250925092565b6000620001888262000199565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600067ffffffffffffffff82169050919050565b620001d8816200017b565b8114620001e457600080fd5b50565b620001f2816200018f565b8114620001fe57600080fd5b50565b6200020c81620001b9565b81146200021857600080fd5b50565b60805160601c60a05160c01c60c0516112c262000258600039600061051f0152600061054001526000818161015a01526101ae01526112c26000f3fe6080604052600436106100595760003560e01c80631fe543e3146100655780633b2bcbf11461008e578063700eae73146100b957806373dbddf4146100e4578063b91a07e7146100ee578063e89e106a1461012d57610060565b3661006057005b600080fd5b34801561007157600080fd5b5061008c60048036038101906100879190610b2c565b610158565b005b34801561009a57600080fd5b506100a3610218565b6040516100b09190610e17565b60405180910390f35b3480156100c557600080fd5b506100ce61023c565b6040516100db9190610da2565b60405180910390f35b6100ec6103cf565b005b3480156100fa57600080fd5b5061011560048036038101906101109190610ada565b610754565b60405161012493929190610d6b565b60405180910390f35b34801561013957600080fd5b506101426107ab565b60405161014f9190610e32565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461020a57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610201929190610d42565b60405180910390fd5b61021482826107b1565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600060015467ffffffffffffffff811115610282577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156102bb57816020015b6102a86109e1565b8152602001906001900390816102a05790505b50905060005b6001548110156103c757600360006001836102dc9190610f0e565b81526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff1615151515815250508282815181106103a9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525080806103bf90611150565b9150506102c1565b508091505090565b600034141561040a576040517f226007c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b476002346104189190610f64565b6002546104259190610f0e565b111561045d576040517fa3fb8f9d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156104e1576040517f40b2118700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006003620186a060026040518663ffffffff1660e01b8152600401610587959493929190610dc4565b602060405180830381600087803b1580156105a157600080fd5b505af11580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d99190610b03565b60018190555060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020013481526020016000151581525060036000600154815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548160ff0219169083151502179055509050506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506002346107019190610f64565b600260008282546107129190610f0e565b925050819055507f9ac10fb18c93d33ad7b0a941897aef048d0f8d30756684e82b4552ba12764d4560015460405161074a9190610e32565b60405180910390a1565b60036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900460ff16905083565b60015481565b6000806002836000815181106107f0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516108029190611199565b149050600060036000858152602001908152602001600020905081156108fa578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600283600101546108719190610f64565b9081150290604051600060405180830381858888f1935050505015801561089c573d6000803e3d6000fd5b5060018160020160006101000a81548160ff0219169083151502179055507f6645d407d6b62a7abb22d0cd445307b3c6e0ae66026f5a086bbfeee67273b47e8482846040516108ed93929190610e4d565b60405180910390a1610936565b7f6645d407d6b62a7abb22d0cd445307b3c6e0ae66026f5a086bbfeee67273b47e84828460405161092d93929190610e4d565b60405180910390a15b6000600460008360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600281600101546109c39190610f64565b600260008282546109d49190610fbe565b9250508190555050505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b6000610a2d610a2884610ea9565b610e84565b90508083825260208201905082856020860282011115610a4c57600080fd5b60005b85811015610a7c5781610a628882610ab0565b845260208401935060208301925050600181019050610a4f565b5050509392505050565b600082601f830112610a9757600080fd5b8135610aa7848260208601610a1a565b91505092915050565b600081359050610abf81611275565b92915050565b600081519050610ad481611275565b92915050565b600060208284031215610aec57600080fd5b6000610afa84828501610ab0565b91505092915050565b600060208284031215610b1557600080fd5b6000610b2384828501610ac5565b91505092915050565b60008060408385031215610b3f57600080fd5b6000610b4d85828601610ab0565b925050602083013567ffffffffffffffff811115610b6a57600080fd5b610b7685828601610a86565b9150509250929050565b6000610b8c8383610c50565b60608301905092915050565b610ba181611029565b82525050565b610bb081611029565b82525050565b6000610bc182610ee5565b610bcb8185610efd565b9350610bd683610ed5565b8060005b83811015610c07578151610bee8882610b80565b9750610bf983610ef0565b925050600181019050610bda565b5085935050505092915050565b610c1d8161103b565b82525050565b610c2c8161103b565b82525050565b610c3b81611047565b82525050565b610c4a816110ad565b82525050565b606082016000820151610c666000850182610b98565b506020820151610c796020850182610d06565b506040820151610c8c6040850182610c14565b50505050565b606082016000808301549050610ca7816110d1565b610cb46000860182610b98565b5060018301549050610cc581611105565b610cd26020860182610d06565b5060028301549050610ce3816110eb565b610cf06040860182610c14565b5050505050565b610d0081611051565b82525050565b610d0f8161107f565b82525050565b610d1e8161107f565b82525050565b610d2d81611089565b82525050565b610d3c81611099565b82525050565b6000604082019050610d576000830185610ba7565b610d646020830184610ba7565b9392505050565b6000606082019050610d806000830186610ba7565b610d8d6020830185610d15565b610d9a6040830184610c23565b949350505050565b60006020820190508181036000830152610dbc8184610bb6565b905092915050565b600060a082019050610dd96000830188610c32565b610de66020830187610d33565b610df36040830186610cf7565b610e006060830185610d24565b610e0d6080830184610d24565b9695505050505050565b6000602082019050610e2c6000830184610c41565b92915050565b6000602082019050610e476000830184610d15565b92915050565b600060a082019050610e626000830186610d15565b610e6f6020830185610c92565b610e7c6080830184610c23565b949350505050565b6000610e8e610e9f565b9050610e9a828261111f565b919050565b6000604051905090565b600067ffffffffffffffff821115610ec457610ec3611228565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b6000610f198261107f565b9150610f248361107f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f5957610f586111ca565b5b828201905092915050565b6000610f6f8261107f565b9150610f7a8361107f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fb357610fb26111ca565b5b828202905092915050565b6000610fc98261107f565b9150610fd48361107f565b925082821015610fe757610fe66111ca565b5b828203905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ff82169050919050565b6000819050919050565b60006110348261105f565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006110b8826110bf565b9050919050565b60006110ca8261105f565b9050919050565b60006110e46110df83611268565b610ff2565b9050919050565b60006110fe6110f983611268565b611012565b9050919050565b600061111861111383611268565b61101f565b9050919050565b61112882611257565b810181811067ffffffffffffffff8211171561114757611146611228565b5b80604052505050565b600061115b8261107f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561118e5761118d6111ca565b5b600182019050919050565b60006111a48261107f565b91506111af8361107f565b9250826111bf576111be6111f9565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160001c9050919050565b61127e8161107f565b811461128957600080fd5b5056fea2646970667358221220f854af264fcfc9364d8c22fd5d8ea8077b32145ee377dc46ba136fdd81e2a01a64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100595760003560e01c80631fe543e3146100655780633b2bcbf11461008e578063700eae73146100b957806373dbddf4146100e4578063b91a07e7146100ee578063e89e106a1461012d57610060565b3661006057005b600080fd5b34801561007157600080fd5b5061008c60048036038101906100879190610b2c565b610158565b005b34801561009a57600080fd5b506100a3610218565b6040516100b09190610e17565b60405180910390f35b3480156100c557600080fd5b506100ce61023c565b6040516100db9190610da2565b60405180910390f35b6100ec6103cf565b005b3480156100fa57600080fd5b5061011560048036038101906101109190610ada565b610754565b60405161012493929190610d6b565b60405180910390f35b34801561013957600080fd5b506101426107ab565b60405161014f9190610e32565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461020a57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610201929190610d42565b60405180910390fd5b61021482826107b1565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600060015467ffffffffffffffff811115610282577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156102bb57816020015b6102a86109e1565b8152602001906001900390816102a05790505b50905060005b6001548110156103c757600360006001836102dc9190610f0e565b81526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff1615151515815250508282815181106103a9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525080806103bf90611150565b9150506102c1565b508091505090565b600034141561040a576040517f226007c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b476002346104189190610f64565b6002546104259190610f0e565b111561045d576040517fa3fb8f9d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156104e1576040517f40b2118700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006003620186a060026040518663ffffffff1660e01b8152600401610587959493929190610dc4565b602060405180830381600087803b1580156105a157600080fd5b505af11580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d99190610b03565b60018190555060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020013481526020016000151581525060036000600154815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548160ff0219169083151502179055509050506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506002346107019190610f64565b600260008282546107129190610f0e565b925050819055507f9ac10fb18c93d33ad7b0a941897aef048d0f8d30756684e82b4552ba12764d4560015460405161074a9190610e32565b60405180910390a1565b60036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900460ff16905083565b60015481565b6000806002836000815181106107f0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516108029190611199565b149050600060036000858152602001908152602001600020905081156108fa578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600283600101546108719190610f64565b9081150290604051600060405180830381858888f1935050505015801561089c573d6000803e3d6000fd5b5060018160020160006101000a81548160ff0219169083151502179055507f6645d407d6b62a7abb22d0cd445307b3c6e0ae66026f5a086bbfeee67273b47e8482846040516108ed93929190610e4d565b60405180910390a1610936565b7f6645d407d6b62a7abb22d0cd445307b3c6e0ae66026f5a086bbfeee67273b47e84828460405161092d93929190610e4d565b60405180910390a15b6000600460008360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600281600101546109c39190610f64565b600260008282546109d49190610fbe565b9250508190555050505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b6000610a2d610a2884610ea9565b610e84565b90508083825260208201905082856020860282011115610a4c57600080fd5b60005b85811015610a7c5781610a628882610ab0565b845260208401935060208301925050600181019050610a4f565b5050509392505050565b600082601f830112610a9757600080fd5b8135610aa7848260208601610a1a565b91505092915050565b600081359050610abf81611275565b92915050565b600081519050610ad481611275565b92915050565b600060208284031215610aec57600080fd5b6000610afa84828501610ab0565b91505092915050565b600060208284031215610b1557600080fd5b6000610b2384828501610ac5565b91505092915050565b60008060408385031215610b3f57600080fd5b6000610b4d85828601610ab0565b925050602083013567ffffffffffffffff811115610b6a57600080fd5b610b7685828601610a86565b9150509250929050565b6000610b8c8383610c50565b60608301905092915050565b610ba181611029565b82525050565b610bb081611029565b82525050565b6000610bc182610ee5565b610bcb8185610efd565b9350610bd683610ed5565b8060005b83811015610c07578151610bee8882610b80565b9750610bf983610ef0565b925050600181019050610bda565b5085935050505092915050565b610c1d8161103b565b82525050565b610c2c8161103b565b82525050565b610c3b81611047565b82525050565b610c4a816110ad565b82525050565b606082016000820151610c666000850182610b98565b506020820151610c796020850182610d06565b506040820151610c8c6040850182610c14565b50505050565b606082016000808301549050610ca7816110d1565b610cb46000860182610b98565b5060018301549050610cc581611105565b610cd26020860182610d06565b5060028301549050610ce3816110eb565b610cf06040860182610c14565b5050505050565b610d0081611051565b82525050565b610d0f8161107f565b82525050565b610d1e8161107f565b82525050565b610d2d81611089565b82525050565b610d3c81611099565b82525050565b6000604082019050610d576000830185610ba7565b610d646020830184610ba7565b9392505050565b6000606082019050610d806000830186610ba7565b610d8d6020830185610d15565b610d9a6040830184610c23565b949350505050565b60006020820190508181036000830152610dbc8184610bb6565b905092915050565b600060a082019050610dd96000830188610c32565b610de66020830187610d33565b610df36040830186610cf7565b610e006060830185610d24565b610e0d6080830184610d24565b9695505050505050565b6000602082019050610e2c6000830184610c41565b92915050565b6000602082019050610e476000830184610d15565b92915050565b600060a082019050610e626000830186610d15565b610e6f6020830185610c92565b610e7c6080830184610c23565b949350505050565b6000610e8e610e9f565b9050610e9a828261111f565b919050565b6000604051905090565b600067ffffffffffffffff821115610ec457610ec3611228565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b6000610f198261107f565b9150610f248361107f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f5957610f586111ca565b5b828201905092915050565b6000610f6f8261107f565b9150610f7a8361107f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fb357610fb26111ca565b5b828202905092915050565b6000610fc98261107f565b9150610fd48361107f565b925082821015610fe757610fe66111ca565b5b828203905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ff82169050919050565b6000819050919050565b60006110348261105f565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006110b8826110bf565b9050919050565b60006110ca8261105f565b9050919050565b60006110e46110df83611268565b610ff2565b9050919050565b60006110fe6110f983611268565b611012565b9050919050565b600061111861111383611268565b61101f565b9050919050565b61112882611257565b810181811067ffffffffffffffff8211171561114757611146611228565b5b80604052505050565b600061115b8261107f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561118e5761118d6111ca565b5b600182019050919050565b60006111a48261107f565b91506111af8361107f565b9250826111bf576111be6111f9565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160001c9050919050565b61127e8161107f565b811461128957600080fd5b5056fea2646970667358221220f854af264fcfc9364d8c22fd5d8ea8077b32145ee377dc46ba136fdd81e2a01a64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 161,
        "contract": "contracts/Coinflip.sol:Coinflip",
        "label": "COORDINATOR",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(VRFCoordinatorV2Interface)146"
      },
      {
        "astId": 172,
        "contract": "contracts/Coinflip.sol:Coinflip",
        "label": "s_requestId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 185,
        "contract": "contracts/Coinflip.sol:Coinflip",
        "label": "ethToSend",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 190,
        "contract": "contracts/Coinflip.sol:Coinflip",
        "label": "requestIdToBet",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Bet)168_storage)"
      },
      {
        "astId": 194,
        "contract": "contracts/Coinflip.sol:Coinflip",
        "label": "userToCoinflip",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(VRFCoordinatorV2Interface)146": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Bet)168_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Coinflip.Bet)",
        "numberOfBytes": "32",
        "value": "t_struct(Bet)168_storage"
      },
      "t_struct(Bet)168_storage": {
        "encoding": "inplace",
        "label": "struct Coinflip.Bet",
        "members": [
          {
            "astId": 163,
            "contract": "contracts/Coinflip.sol:Coinflip",
            "label": "player",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 165,
            "contract": "contracts/Coinflip.sol:Coinflip",
            "label": "bet",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 167,
            "contract": "contracts/Coinflip.sol:Coinflip",
            "label": "didWin",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}